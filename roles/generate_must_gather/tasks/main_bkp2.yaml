---

# Crear el Namespace donde se ejecutará must-gather
- name: Create namespace for must-gather
  kubernetes.core.k8s:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: must-gather-temp

# Crear el ServiceAccount para must-gather
- name: Create ServiceAccount for must-gather
  kubernetes.core.k8s:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: must-gather-sa
        namespace: must-gather-temp

# Otorgar permisos de cluster-admin al ServiceAccount
- name: Grant cluster-admin role to must-gather ServiceAccount
  kubernetes.core.k8s:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: must-gather-sa-cluster-admin
      subjects:
        - kind: ServiceAccount
          name: must-gather-sa
          namespace: must-gather-temp
      roleRef:
        kind: ClusterRole
        name: cluster-admin
        apiGroup: rbac.authorization.k8s.io

# Crear el Pod admin-cli con la imagen OpenShift CLI
- name: Deploy admin-cli pod for must-gather
  kubernetes.core.k8s:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    state: present
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: admin-cli
        namespace: must-gather-temp
      spec:
        serviceAccountName: must-gather-sa
        restartPolicy: Never
        containers:
          - name: admin-cli
            image: quay.io/openshift-release-dev/ocp-v4.0-art-dev:latest
            command: ["/bin/sh", "-c", "sleep 3600"]

# Esperar hasta que el pod esté en estado Running
- name: Wait for admin-cli pod to be running
  kubernetes.core.k8s_info:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    kind: Pod
    namespace: must-gather-temp
    name: admin-cli
  register: pod_status
  retries: 10
  delay: 5
  until: pod_status.resources[0].status.phase == "Running"

# Ejecutar must-gather dentro del pod
- name: Execute must-gather in the 'admin-cli' pod
  kubernetes.core.k8s_exec:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    namespace: "must-gather-temp"
    pod: "admin-cli"
    container: "admin-cli"
    command: "/bin/sh"
    stdin: "{{ must_gather_command }} --dest-dir=/tmp/must-gather"
  register: must_gather_result
  changed_when: false
  failed_when: must_gather_result.rc is defined and must_gather_result.rc != 0


# Verificar que el directorio must-gather se creó correctamente
- name: Check if must-gather directory exists
  kubernetes.core.k8s_exec:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    namespace: "must-gather-temp"
    pod: "admin-cli"
    container: "admin-cli"
    command: "ls -ld /tmp/must-gather"
  register: must_gather_stat
  changed_when: false
  failed_when: "'No such file or directory' in must_gather_stat.stdout"

# Comprimir los datos dentro del pod
- name: Compress must-gather directory inside pod
  kubernetes.core.k8s_exec:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    namespace: "must-gather-temp"
    pod: "admin-cli"
    container: "admin-cli"
    command: "tar -czf /tmp/must-gather.tar.gz -C /tmp must-gather"
  register: archive_result
  changed_when: archive_result.rc == 0
  failed_when: archive_result.rc != 0

# Copiar el archivo comprimido a la máquina local
- name: Copy must-gather tarball from pod to local machine
  ansible.builtin.shell: >-
    oc cp must-gather-temp/admin-cli:/tmp/must-gather.tar.gz /tmp/must-gather.tar.gz
  register: copy_result
  changed_when: false
  failed_when: copy_result.rc != 0

# Verificar que el archivo comprimido existe en la máquina local
- name: Verify compressed file on local machine
  ansible.builtin.stat:
    path: "/tmp/must-gather.tar.gz"
  register: compressed_file

- name: Debug compressed file details
  ansible.builtin.debug:
    msg:
      - "Compressed file exists: {{ compressed_file.stat.exists }}"
      - "Compressed file size: {{ compressed_file.stat.size | default(0) }} bytes"

# Eliminar los recursos después de la ejecución
- name: Cleanup - Delete must-gather pod and namespace
  kubernetes.core.k8s:
    host: "{{ openshift_api_url }}"
    api_key: "{{ openshift_api_token }}"
    validate_certs: false
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: must-gather-temp
